__import__('pysqlite3')
import sys
sys.modules['sqlite3'] = sys.modules.pop('pysqlite3')

import os
import streamlit as st
from crewai import Agent, Task, Crew, Process, LLM
import json
import numpy as np
import pygame
from pydub import AudioSegment
from pydub.generators import Sine
import io
import base64

# Configurando o modelo usando a classe LLM nativa do CrewAI
gpt4o = 'gpt-4o-mini'

llm = LLM(
    model="gpt-4",
    temperature=0.8
)

# Fun√ß√£o para gerar √°udio simples baseado no tom
def gerar_audio_simples(tom, estilo="tradicional"):
    """Gera um √°udio simples baseado no tom selecionado"""
    try:
        # Mapeamento de tons para frequ√™ncias (em Hz)
        tons_freq = {
            "C": 261.63, "C#": 277.18, "Db": 277.18,
            "D": 293.66, "D#": 311.13, "Eb": 311.13,
            "E": 329.63, "F": 349.23, "F#": 369.99, "Gb": 369.99,
            "G": 392.00, "G#": 415.30, "Ab": 415.30,
            "A": 440.00, "A#": 466.16, "Bb": 466.16,
            "B": 493.88
        }

        freq_base = tons_freq.get(tom, 440.00)

        # Criar uma progress√£o simples baseada no estilo
        if estilo == "tradicional":
            # Progress√£o I-V-vi-IV (muito comum em m√∫sica cat√≥lica)
            acordes = [freq_base, freq_base * 1.5, freq_base * 1.68, freq_base * 1.33]
        else:  # contempor√¢neo
            # Progress√£o vi-IV-I-V
            acordes = [freq_base * 1.68, freq_base * 1.33, freq_base, freq_base * 1.5]

        # Gerar √°udio
        audio_final = AudioSegment.empty()

        for freq in acordes:
            # Gerar tom por 2 segundos
            tom_audio = Sine(freq).to_audio_segment(duration=2000)
            # Adicionar fade in/out para suavizar
            tom_audio = tom_audio.fade_in(100).fade_out(100)
            audio_final += tom_audio

        # Converter para bytes
        audio_bytes = io.BytesIO()
        audio_final.export(audio_bytes, format="mp3")
        audio_bytes.seek(0)

        return audio_bytes.getvalue()

    except Exception as e:
        st.error(f"Erro ao gerar √°udio: {str(e)}")
        return None

# Fun√ß√£o para configurar o agente e executar a composi√ß√£o
def criar_musica(sentimentos, tom, estilo):
    # Definindo o agente
    agent_escritor = Agent(
        role="Compositor de M√∫sica Cat√≥lica",
        goal="Escreva uma m√∫sica cat√≥lica que honre a Sant√≠ssima Trindade, a Virgem Maria e os Santos, expressando os seguintes sentimentos: {sentimentos}. A m√∫sica deve estar no tom {tom} e seguir o estilo {estilo}.",
        verbose=True,
        memory=True,
        llm=llm,
        backstory="""
            Voc√™ √© um compositor cat√≥lico devoto, formado em m√∫sica sacra e teologia. Desde a juventude, voc√™ se dedica
            √† composi√ß√£o de m√∫sica lit√∫rgica e devocional, inspirado pela rica tradi√ß√£o musical da Igreja Cat√≥lica.
            Seu conhecimento abrange desde o canto gregoriano at√© a m√∫sica cat√≥lica contempor√¢nea, passando pelos grandes
            mestres como Palestrina, Bach e os compositores de m√∫sica sacra moderna.

            Voc√™ compreende profundamente a liturgia cat√≥lica, os tempos lit√∫rgicos, as devo√ß√µes marianas e a venera√ß√£o
            aos santos. Suas composi√ß√µes refletem a doutrina cat√≥lica, incorporando elementos da Escritura Sagrada,
            da Tradi√ß√£o da Igreja e do Magist√©rio. Voc√™ busca criar m√∫sica que eleve as almas a Deus, honre Nossa Senhora
            e inspire os fi√©is em sua jornada de f√©.

            Sua especialidade inclui hinos marianos, cantos lit√∫rgicos, m√∫sica para adora√ß√£o eucar√≠stica e can√ß√µes
            devocionais que respeitem a tradi√ß√£o cat√≥lica enquanto tocam o cora√ß√£o dos fi√©is contempor√¢neos.
        """
    )

    # Definindo a tarefa
    tarefa_composicao = Task(
        description=f"""
            Crie uma m√∫sica cat√≥lica inspiradora que honre a tradi√ß√£o da Igreja Cat√≥lica. A composi√ß√£o deve ser adequada
            para uso lit√∫rgico, devocional ou em momentos de ora√ß√£o pessoal. A letra deve ser teologicamente s√≥lida,
            respeitando a doutrina cat√≥lica, e a melodia deve ser adequada para o canto congregacional.

            Especifica√ß√µes:
            - Tom musical: {tom} (todas as cifras devem estar neste tom)
            - Estilo musical: {estilo}
            - Estrutura: Inclua versos, refr√£o e uma ponte (se apropriado para o estilo)
            - Tom emocional: Reverente, esperan√ßoso e espiritualmente edificante
            - Elementos cat√≥licos: Incorporar refer√™ncias √† Sant√≠ssima Trindade, Virgem Maria, Santos, Eucaristia ou liturgia
            - Tradi√ß√£o: Respeitar a rica tradi√ß√£o musical cat√≥lica
            - Sentimentos a expressar: {sentimentos}
        """,
        expected_output=f"""
            - Responder, obrigatoriamente, no idioma Portugu√™s Brasileiro.
            - A letra completa da m√∫sica cat√≥lica, formatada em versos e refr√£o.
            - Todas as cifras devem estar no tom {tom} especificado.
            - Sugest√£o da melodia b√°sica adequada ao estilo {estilo}.
            - Cifras completas para acompanhamento instrumental no tom {tom}.
            - Indica√ß√£o de tempo lit√∫rgico apropriado (se aplic√°vel).
            - Refer√™ncias b√≠blicas ou doutrinais utilizadas.
            - Breve descri√ß√£o da inten√ß√£o espiritual e uso lit√∫rgico recomendado.

            O texto formatado deve seguir as seguintes regras:
  			1. T√≠tulos e subt√≠tulos devem estar em negrito, utilizando markdown.
  			2. O conte√∫do deve manter espa√ßamento adequado e alinhamento claro.
  			3. Listas devem ser utilizadas para informa√ß√µes estruturadas.
  			4. Preserve a estrutura musical (versos, refr√µes, ponte).
  			5. O resultado deve ser apresentado em formato markdown.
            6. Incluir se√ß√£o espec√≠fica com as cifras no tom {tom}.
        """,
        agent=agent_escritor
    )

    # Criando a tripula√ß√£o
    equipe = Crew(
        agents=[agent_escritor],
        tasks=[tarefa_composicao],
        process=Process.sequential
    )

    # Executando a tripula√ß√£o
    result = equipe.kickoff(inputs={
        "sentimentos": sentimentos,
        "tom": tom,
        "estilo": estilo
    })

    return result

# Interface do Streamlit
st.title("Compositor de M√∫sica Cat√≥lica üéµ‚úùÔ∏è")
st.write("Crie m√∫sicas cat√≥licas inspiradoras para liturgia, devo√ß√£o e ora√ß√£o.")

# Sidebar para configura√ß√µes
st.sidebar.header("‚öôÔ∏è Configura√ß√µes da M√∫sica")

# Sele√ß√£o de tom
tons_disponiveis = [
    "C", "C#/Db", "D", "D#/Eb", "E", "F",
    "F#/Gb", "G", "G#/Ab", "A", "A#/Bb", "B"
]
tom_selecionado = st.sidebar.selectbox(
    "üéº Selecione o tom da m√∫sica:",
    tons_disponiveis,
    index=6  # G como padr√£o
)

# Converter tom para formato simples
tom_map = {
    "C#/Db": "C#", "D#/Eb": "D#", "F#/Gb": "F#", "G#/Ab": "G#", "A#/Bb": "A#"
}
tom = tom_map.get(tom_selecionado, tom_selecionado)

# Sele√ß√£o de estilo
estilos_disponiveis = [
    "Tradicional (Hinos Cl√°ssicos)",
    "Contempor√¢neo (M√∫sica Cat√≥lica Moderna)",
    "Gregoriano (Inspira√ß√£o Medieval)",
    "Mariano (Devo√ß√£o √† Nossa Senhora)",
    "Lit√∫rgico (Para Missa)"
]
estilo_selecionado = st.sidebar.selectbox(
    "üé® Selecione o estilo musical:",
    estilos_disponiveis,
    index=0
)

# Mapear estilo para formato simples
estilo_map = {
    "Tradicional (Hinos Cl√°ssicos)": "tradicional",
    "Contempor√¢neo (M√∫sica Cat√≥lica Moderna)": "contempor√¢neo",
    "Gregoriano (Inspira√ß√£o Medieval)": "gregoriano",
    "Mariano (Devo√ß√£o √† Nossa Senhora)": "mariano",
    "Lit√∫rgico (Para Missa)": "lit√∫rgico"
}
estilo = estilo_map[estilo_selecionado]

# Entrada principal
st.subheader("üìù Composi√ß√£o")
sentimentos = st.text_area(
    "Digite os sentimentos ou temas que deseja incluir na m√∫sica:",
    "gratid√£o, esperan√ßa, paz, devo√ß√£o mariana",
    height=100
)

# Informa√ß√µes adicionais
with st.expander("‚ÑπÔ∏è Informa√ß√µes sobre os estilos"):
    st.markdown("""
    **Tradicional**: Hinos cl√°ssicos cat√≥licos com harmonias tradicionais
    **Contempor√¢neo**: M√∫sica cat√≥lica moderna com instrumenta√ß√£o atual
    **Gregoriano**: Inspirado no canto gregoriano medieval
    **Mariano**: Focado na devo√ß√£o √† Virgem Maria
    **Lit√∫rgico**: Apropriado para uso durante a Santa Missa
    """)

# Bot√µes de a√ß√£o
col1, col2 = st.columns(2)

with col1:
    gerar_musica = st.button("üéµ Gerar M√∫sica", type="primary", use_container_width=True)

with col2:
    gerar_audio = st.button("üîä Gerar √Åudio", use_container_width=True)

# Gera√ß√£o da m√∫sica
if gerar_musica:
    with st.spinner("Compondo a m√∫sica cat√≥lica..."):
        try:
            resultado = criar_musica(sentimentos, tom, estilo)

            st.success("üéâ M√∫sica cat√≥lica composta com sucesso!")

            # Processar e exibir o texto formatado
            st.markdown("### üìú Composi√ß√£o Musical")
            if isinstance(resultado, str):
                try:
                    resultado_json = json.loads(resultado)
                    texto_formatado = resultado_json.get("raw", resultado)
                except json.JSONDecodeError:
                    texto_formatado = resultado
            elif isinstance(resultado, dict):
                texto_formatado = resultado.get("raw", str(resultado))
            else:
                texto_formatado = str(resultado)

            # Exibir o texto formatado
            st.markdown(texto_formatado)

            # Salvar resultado na sess√£o para uso posterior
            st.session_state.ultima_musica = texto_formatado
            st.session_state.ultimo_tom = tom
            st.session_state.ultimo_estilo = estilo

        except Exception as e:
            st.error("‚ùå Ocorreu um erro ao compor a m√∫sica.")
            st.error(f"Detalhes do erro: {str(e)}")

# Gera√ß√£o de √°udio
if gerar_audio:
    if 'ultima_musica' not in st.session_state:
        st.warning("‚ö†Ô∏è Primeiro gere uma m√∫sica antes de criar o √°udio!")
    else:
        with st.spinner("Gerando √°udio da m√∫sica..."):
            try:
                audio_bytes = gerar_audio_simples(
                    st.session_state.get('ultimo_tom', tom),
                    st.session_state.get('ultimo_estilo', estilo)
                )

                if audio_bytes:
                    st.success("üé∂ √Åudio gerado com sucesso!")

                    # Player de √°udio
                    st.audio(audio_bytes, format='audio/mp3')

                    # Bot√£o de download
                    st.download_button(
                        label="‚¨áÔ∏è Download do √Åudio",
                        data=audio_bytes,
                        file_name=f"musica_catolica_{tom}_{estilo}.mp3",
                        mime="audio/mp3"
                    )
                else:
                    st.error("‚ùå Erro ao gerar o √°udio.")

            except Exception as e:
                st.error("‚ùå Ocorreu um erro ao gerar o √°udio.")
                st.error(f"Detalhes do erro: {str(e)}")

# Rodap√©
st.markdown("---")
st.markdown("üôè *Que esta m√∫sica possa elevar cora√ß√µes a Deus e honrar Nossa Senhora*")
st.markdown("‚úùÔ∏è *Ad Majorem Dei Gloriam*")
