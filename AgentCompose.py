__import__('pysqlite3')
import sys
sys.modules['sqlite3'] = sys.modules.pop('pysqlite3')

import os
import streamlit as st
from crewai import Agent, Task, Crew, Process, LLM
import json
import numpy as np
import pygame
from pydub import AudioSegment
from pydub.generators import Sine
import io
import base64
import tempfile
from gtts import gTTS
import librosa
import soundfile as sf
import re
from datetime import datetime

# Importar m√≥dulos personalizados
try:
    from calendario_liturgico import CalendarioLiturgico
    from gerador_partituras import GeradorPartituras
    from sistema_vozes import SistemaVozes
    from sistema_favoritos import SistemaFavoritos
    from mixer_audio import MixerAudio
except ImportError as e:
    st.error(f"Erro ao importar m√≥dulos: {str(e)}")
    st.stop()

# Configurando o modelo usando a classe LLM nativa do CrewAI
gpt4o = 'gpt-4o-mini'

llm = LLM(
    model="gpt-4",
    temperature=0.8
)

# Inicializar sistemas
@st.cache_resource
def inicializar_sistemas():
    """Inicializa todos os sistemas do compositor"""
    return {
        "calendario": CalendarioLiturgico(),
        "partituras": GeradorPartituras(),
        "vozes": SistemaVozes(),
        "favoritos": SistemaFavoritos(),
        "mixer": MixerAudio()
    }

# Obter sistemas
sistemas = inicializar_sistemas()

# Fun√ß√£o para gerar √°udio simples baseado no tom
def gerar_audio_simples(tom, estilo="tradicional"):
    """Gera um √°udio simples baseado no tom selecionado"""
    try:
        # Mapeamento de tons para frequ√™ncias (em Hz)
        tons_freq = {
            "C": 261.63, "C#": 277.18, "Db": 277.18,
            "D": 293.66, "D#": 311.13, "Eb": 311.13,
            "E": 329.63, "F": 349.23, "F#": 369.99, "Gb": 369.99,
            "G": 392.00, "G#": 415.30, "Ab": 415.30,
            "A": 440.00, "A#": 466.16, "Bb": 466.16,
            "B": 493.88
        }

        freq_base = tons_freq.get(tom, 440.00)

        # Criar uma progress√£o simples baseada no estilo
        if estilo == "tradicional":
            # Progress√£o I-V-vi-IV (muito comum em m√∫sica cat√≥lica)
            acordes = [freq_base, freq_base * 1.5, freq_base * 1.68, freq_base * 1.33]
        else:  # contempor√¢neo
            # Progress√£o vi-IV-I-V
            acordes = [freq_base * 1.68, freq_base * 1.33, freq_base, freq_base * 1.5]

        # Gerar √°udio
        audio_final = AudioSegment.empty()

        for freq in acordes:
            # Gerar tom por 2 segundos
            tom_audio = Sine(freq).to_audio_segment(duration=2000)
            # Adicionar fade in/out para suavizar
            tom_audio = tom_audio.fade_in(100).fade_out(100)
            audio_final += tom_audio

        # Converter para bytes
        audio_bytes = io.BytesIO()
        audio_final.export(audio_bytes, format="mp3")
        audio_bytes.seek(0)

        return audio_bytes.getvalue()

    except Exception as e:
        st.error(f"Erro ao gerar √°udio: {str(e)}")
        return None

# Fun√ß√£o para extrair letra do texto gerado
def extrair_letra_musica(texto_completo):
    """Extrai apenas a letra da m√∫sica do texto completo gerado"""
    try:
        # Procurar por se√ß√µes de letra (versos, refr√£o, etc.)
        linhas = texto_completo.split('\n')
        letra_linhas = []

        # Palavras-chave que indicam se√ß√µes de letra
        secoes_letra = ['verso', 'refr√£o', 'refrao', 'ponte', 'coro', 'estrofe']

        capturando_letra = False
        for linha in linhas:
            linha_limpa = linha.strip().lower()

            # Verificar se √© uma se√ß√£o de letra
            if any(secao in linha_limpa for secao in secoes_letra):
                capturando_letra = True
                continue

            # Parar se encontrar se√ß√µes t√©cnicas
            if any(palavra in linha_limpa for palavra in ['cifra', 'acorde', 'tom:', 'bpm', 'compasso']):
                capturando_letra = False
                continue

            # Capturar linhas de letra
            if capturando_letra and linha.strip() and not linha.startswith('#') and not linha.startswith('*'):
                # Remover marca√ß√µes markdown
                linha_letra = re.sub(r'\*\*([^*]+)\*\*', r'\1', linha.strip())
                linha_letra = re.sub(r'\*([^*]+)\*', r'\1', linha_letra)
                if linha_letra:
                    letra_linhas.append(linha_letra)

        return ' '.join(letra_linhas) if letra_linhas else "Letra n√£o encontrada no texto gerado."

    except Exception as e:
        return f"Erro ao extrair letra: {str(e)}"

# Fun√ß√£o para gerar √°udio com Text-to-Speech
def gerar_audio_com_voz(letra, tom, estilo, velocidade=1.0):
    """Gera √°udio com voz cantando a letra em portugu√™s"""
    try:
        # Gerar m√∫sica instrumental
        audio_instrumental = gerar_audio_simples(tom, estilo)
        if not audio_instrumental:
            return None

        # Gerar voz com TTS
        tts = gTTS(text=letra, lang='pt-br', slow=False)

        # Salvar TTS em arquivo tempor√°rio
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as temp_tts:
            tts.save(temp_tts.name)

            # Carregar √°udio da voz
            audio_voz = AudioSegment.from_mp3(temp_tts.name)

            # Carregar √°udio instrumental
            audio_instrumental_seg = AudioSegment.from_file(io.BytesIO(audio_instrumental))

            # Ajustar velocidade da voz se necess√°rio
            if velocidade != 1.0:
                # Simular mudan√ßa de velocidade alterando frame rate
                new_sample_rate = int(audio_voz.frame_rate * velocidade)
                audio_voz = audio_voz._spawn(audio_voz.raw_data, overrides={"frame_rate": new_sample_rate})
                audio_voz = audio_voz.set_frame_rate(audio_voz.frame_rate)

            # Ajustar volumes
            audio_instrumental_seg = audio_instrumental_seg - 10  # Diminuir volume instrumental
            audio_voz = audio_voz + 5  # Aumentar volume da voz

            # Repetir instrumental se necess√°rio para cobrir toda a voz
            duracao_voz = len(audio_voz)
            duracao_instrumental = len(audio_instrumental_seg)

            if duracao_voz > duracao_instrumental:
                repeticoes = (duracao_voz // duracao_instrumental) + 1
                audio_instrumental_seg = audio_instrumental_seg * repeticoes

            # Cortar instrumental para dura√ß√£o da voz
            audio_instrumental_seg = audio_instrumental_seg[:duracao_voz]

            # Mixar voz e instrumental
            audio_final = audio_instrumental_seg.overlay(audio_voz)

            # Converter para bytes
            audio_bytes = io.BytesIO()
            audio_final.export(audio_bytes, format="mp3")
            audio_bytes.seek(0)

            # Limpar arquivo tempor√°rio
            os.unlink(temp_tts.name)

            return audio_bytes.getvalue()

    except Exception as e:
        st.error(f"Erro ao gerar √°udio com voz: {str(e)}")
        return None

# Fun√ß√£o para mudar tom de m√∫sica existente
def mudar_tom_musica(audio_bytes, tom_original, tom_novo):
    """Muda o tom de uma m√∫sica preservando a velocidade e qualidade da voz"""
    try:
        # Verificar se as bibliotecas necess√°rias est√£o dispon√≠veis
        try:
            import librosa
            import soundfile as sf
        except ImportError as e:
            st.error(f"‚ùå Bibliotecas necess√°rias n√£o encontradas: {str(e)}")
            st.error("üí° Instale as depend√™ncias: pip install librosa soundfile")
            return None

        # Mapeamento de tons para semitons
        tons_semitons = {
            'C': 0, 'C#': 1, 'Db': 1, 'D': 2, 'D#': 3, 'Eb': 3,
            'E': 4, 'F': 5, 'F#': 6, 'Gb': 6, 'G': 7, 'G#': 8,
            'Ab': 8, 'A': 9, 'A#': 10, 'Bb': 10, 'B': 11
        }

        # Calcular diferen√ßa em semitons
        semitom_original = tons_semitons.get(tom_original, 0)
        semitom_novo = tons_semitons.get(tom_novo, 0)
        diferenca_semitons = semitom_novo - semitom_original

        if diferenca_semitons == 0:
            st.info("‚ÑπÔ∏è Os tons s√£o iguais. Nenhuma modifica√ß√£o necess√°ria.")
            return audio_bytes  # Sem mudan√ßa necess√°ria

        st.info(f"üéµ Alterando tom: {diferenca_semitons:+d} semitons")

        # Criar arquivos tempor√°rios
        temp_input = None
        temp_output = None

        try:
            # Salvar √°udio em arquivo tempor√°rio
            with tempfile.NamedTemporaryFile(delete=False, suffix='.mp3') as temp_input:
                temp_input.write(audio_bytes)
                temp_input.flush()

                st.info("üìÅ Carregando √°udio...")

                # Carregar √°udio com librosa
                y, sr = librosa.load(temp_input.name, sr=None)

                st.info(f"üéº Processando √°udio: {len(y)} samples, {sr} Hz")

                # Verificar se o √°udio foi carregado corretamente
                if len(y) == 0:
                    st.error("‚ùå √Åudio vazio ou corrompido")
                    return None

                # Mudar tom preservando velocidade (pitch shifting)
                st.info("üîÑ Aplicando mudan√ßa de tom...")
                y_shifted = librosa.effects.pitch_shift(y, sr=sr, n_steps=diferenca_semitons)

                # Salvar resultado em arquivo tempor√°rio
                with tempfile.NamedTemporaryFile(delete=False, suffix='.wav') as temp_output:
                    sf.write(temp_output.name, y_shifted, sr)

                    st.info("üéµ Convertendo para MP3...")

                    # Converter de volta para AudioSegment
                    audio_modificado = AudioSegment.from_wav(temp_output.name)

                    # Converter para bytes
                    audio_bytes_novo = io.BytesIO()
                    audio_modificado.export(audio_bytes_novo, format="mp3")
                    audio_bytes_novo.seek(0)

                    return audio_bytes_novo.getvalue()

        finally:
            # Limpar arquivos tempor√°rios
            try:
                if temp_input and os.path.exists(temp_input.name):
                    os.unlink(temp_input.name)
                if temp_output and os.path.exists(temp_output.name):
                    os.unlink(temp_output.name)
            except Exception as cleanup_error:
                st.warning(f"‚ö†Ô∏è Erro ao limpar arquivos tempor√°rios: {str(cleanup_error)}")

    except ImportError as e:
        st.error(f"‚ùå Erro de importa√ß√£o: {str(e)}")
        st.error("üí° Algumas bibliotecas podem n√£o estar instaladas no ambiente de produ√ß√£o.")
        st.info("üîÑ Tentando m√©todo alternativo...")
        return mudar_tom_alternativo(audio_bytes, tom_original, tom_novo)

    except Exception as e:
        st.error(f"‚ùå Erro ao mudar tom da m√∫sica: {str(e)}")
        st.error(f"üîç Tipo do erro: {type(e).__name__}")
        st.info("üîÑ Tentando m√©todo alternativo...")
        return mudar_tom_alternativo(audio_bytes, tom_original, tom_novo)

# Fun√ß√£o alternativa para mudan√ßa de tom (usando apenas PyDub)
def mudar_tom_alternativo(audio_bytes, tom_original, tom_novo):
    """M√©todo alternativo para mudan√ßa de tom usando apenas PyDub"""
    try:
        st.info("üîÑ Usando m√©todo alternativo (PyDub)...")

        # Mapeamento de tons para semitons
        tons_semitons = {
            'C': 0, 'C#': 1, 'Db': 1, 'D': 2, 'D#': 3, 'Eb': 3,
            'E': 4, 'F': 5, 'F#': 6, 'Gb': 6, 'G': 7, 'G#': 8,
            'Ab': 8, 'A': 9, 'A#': 10, 'Bb': 10, 'B': 11
        }

        # Calcular diferen√ßa em semitons
        semitom_original = tons_semitons.get(tom_original, 0)
        semitom_novo = tons_semitons.get(tom_novo, 0)
        diferenca_semitons = semitom_novo - semitom_original

        if diferenca_semitons == 0:
            return audio_bytes

        # Carregar √°udio com PyDub
        audio = AudioSegment.from_file(io.BytesIO(audio_bytes))

        # Calcular fator de mudan√ßa de pitch (aproxima√ß√£o)
        # Cada semitom = 2^(1/12) ‚âà 1.059463
        pitch_factor = 2 ** (diferenca_semitons / 12.0)

        # Alterar sample rate para simular mudan√ßa de pitch
        new_sample_rate = int(audio.frame_rate * pitch_factor)

        # Aplicar mudan√ßa
        audio_modificado = audio._spawn(
            audio.raw_data,
            overrides={"frame_rate": new_sample_rate}
        ).set_frame_rate(audio.frame_rate)

        # Converter para bytes
        audio_bytes_novo = io.BytesIO()
        audio_modificado.export(audio_bytes_novo, format="mp3")
        audio_bytes_novo.seek(0)

        st.success("‚úÖ Tom alterado usando m√©todo alternativo!")
        st.warning("‚ö†Ô∏è Nota: O m√©todo alternativo pode alterar ligeiramente a velocidade.")

        return audio_bytes_novo.getvalue()

    except Exception as e:
        st.error(f"‚ùå Erro no m√©todo alternativo: {str(e)}")
        st.error("üí° Tente fazer upload de um arquivo de √°udio diferente.")
        return None

# Fun√ß√£o para configurar o agente e executar a composi√ß√£o
def criar_musica(sentimentos, tom, estilo):
    # Definindo o agente
    agent_escritor = Agent(
        role="Compositor de M√∫sica Cat√≥lica",
        goal="Escreva uma m√∫sica cat√≥lica que honre a Sant√≠ssima Trindade, a Virgem Maria e os Santos, expressando os seguintes sentimentos: {sentimentos}. A m√∫sica deve estar no tom {tom} e seguir o estilo {estilo}.",
        verbose=True,
        memory=True,
        llm=llm,
        backstory="""
            Voc√™ √© um compositor cat√≥lico devoto, formado em m√∫sica sacra e teologia. Desde a juventude, voc√™ se dedica
            √† composi√ß√£o de m√∫sica lit√∫rgica e devocional, inspirado pela rica tradi√ß√£o musical da Igreja Cat√≥lica.
            Seu conhecimento abrange desde o canto gregoriano at√© a m√∫sica cat√≥lica contempor√¢nea, passando pelos grandes
            mestres como Palestrina, Bach e os compositores de m√∫sica sacra moderna.

            Voc√™ compreende profundamente a liturgia cat√≥lica, os tempos lit√∫rgicos, as devo√ß√µes marianas e a venera√ß√£o
            aos santos. Suas composi√ß√µes refletem a doutrina cat√≥lica, incorporando elementos da Escritura Sagrada,
            da Tradi√ß√£o da Igreja e do Magist√©rio. Voc√™ busca criar m√∫sica que eleve as almas a Deus, honre Nossa Senhora
            e inspire os fi√©is em sua jornada de f√©.

            Sua especialidade inclui hinos marianos, cantos lit√∫rgicos, m√∫sica para adora√ß√£o eucar√≠stica e can√ß√µes
            devocionais que respeitem a tradi√ß√£o cat√≥lica enquanto tocam o cora√ß√£o dos fi√©is contempor√¢neos.
        """
    )

    # Definindo a tarefa
    tarefa_composicao = Task(
        description=f"""
            Crie uma m√∫sica cat√≥lica inspiradora que honre a tradi√ß√£o da Igreja Cat√≥lica. A composi√ß√£o deve ser adequada
            para uso lit√∫rgico, devocional ou em momentos de ora√ß√£o pessoal. A letra deve ser teologicamente s√≥lida,
            respeitando a doutrina cat√≥lica, e a melodia deve ser adequada para o canto congregacional.

            Especifica√ß√µes:
            - Tom musical: {tom} (todas as cifras devem estar neste tom)
            - Estilo musical: {estilo}
            - Estrutura: Inclua versos, refr√£o e uma ponte (se apropriado para o estilo)
            - Tom emocional: Reverente, esperan√ßoso e espiritualmente edificante
            - Elementos cat√≥licos: Incorporar refer√™ncias √† Sant√≠ssima Trindade, Virgem Maria, Santos, Eucaristia ou liturgia
            - Tradi√ß√£o: Respeitar a rica tradi√ß√£o musical cat√≥lica
            - Sentimentos a expressar: {sentimentos}
        """,
        expected_output=f"""
            - Responder, obrigatoriamente, no idioma Portugu√™s Brasileiro.
            - A letra completa da m√∫sica cat√≥lica, formatada em versos e refr√£o.
            - Todas as cifras devem estar no tom {tom} especificado.
            - Sugest√£o da melodia b√°sica adequada ao estilo {estilo}.
            - Cifras completas para acompanhamento instrumental no tom {tom}.
            - Indica√ß√£o de tempo lit√∫rgico apropriado (se aplic√°vel).
            - Refer√™ncias b√≠blicas ou doutrinais utilizadas.
            - Breve descri√ß√£o da inten√ß√£o espiritual e uso lit√∫rgico recomendado.

            O texto formatado deve seguir as seguintes regras:
  			1. T√≠tulos e subt√≠tulos devem estar em negrito, utilizando markdown.
  			2. O conte√∫do deve manter espa√ßamento adequado e alinhamento claro.
  			3. Listas devem ser utilizadas para informa√ß√µes estruturadas.
  			4. Preserve a estrutura musical (versos, refr√µes, ponte).
  			5. O resultado deve ser apresentado em formato markdown.
            6. Incluir se√ß√£o espec√≠fica com as cifras no tom {tom}.
        """,
        agent=agent_escritor
    )

    # Criando a tripula√ß√£o
    equipe = Crew(
        agents=[agent_escritor],
        tasks=[tarefa_composicao],
        process=Process.sequential
    )

    # Executando a tripula√ß√£o
    result = equipe.kickoff(inputs={
        "sentimentos": sentimentos,
        "tom": tom,
        "estilo": estilo
    })

    return result

# Interface do Streamlit
st.set_page_config(
    page_title="Compositor de M√∫sica Cat√≥lica",
    page_icon="üéµ‚úùÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("üéµ‚úùÔ∏è Compositor de M√∫sica Cat√≥lica")
st.markdown("*Crie e modifique m√∫sicas cat√≥licas com IA avan√ßada*")

# Obter informa√ß√µes lit√∫rgicas
info_liturgica = sistemas["calendario"].obter_informacoes_completas()

# Exibir informa√ß√µes lit√∫rgicas no topo
col_info1, col_info2, col_info3 = st.columns(3)
with col_info1:
    st.info(f"üìÖ **{info_liturgica['tempo']}** - Ano {info_liturgica['ano_liturgico']}")
with col_info2:
    st.success(f"üé® **Estilo Sugerido:** {info_liturgica['estilo_sugerido'].title()}")
with col_info3:
    santo_hoje = sistemas["calendario"].obter_santos_do_dia()
    if santo_hoje:
        st.warning(f"‚úùÔ∏è **{santo_hoje}**")
    else:
        st.warning(f"üéµ **Temas:** {info_liturgica['temas_sugeridos']}")

# Sidebar para configura√ß√µes
st.sidebar.header("‚öôÔ∏è Configura√ß√µes Musicais")

# Sele√ß√£o de tom
tons_disponiveis = [
    "C", "C#/Db", "D", "D#/Eb", "E", "F",
    "F#/Gb", "G", "G#/Ab", "A", "A#/Bb", "B"
]
tom_selecionado = st.sidebar.selectbox(
    "üéº Selecione o tom da m√∫sica:",
    tons_disponiveis,
    index=6  # G como padr√£o
)

# Converter tom para formato simples
tom_map = {
    "C#/Db": "C#", "D#/Eb": "D#", "F#/Gb": "F#", "G#/Ab": "G#", "A#/Bb": "A#"
}
tom = tom_map.get(tom_selecionado, tom_selecionado)

# Sele√ß√£o de estilo
estilos_disponiveis = [
    "Tradicional (Hinos Cl√°ssicos)",
    "Contempor√¢neo (M√∫sica Cat√≥lica Moderna)",
    "Gregoriano (Inspira√ß√£o Medieval)",
    "Mariano (Devo√ß√£o √† Nossa Senhora)",
    "Lit√∫rgico (Para Missa)"
]
estilo_selecionado = st.sidebar.selectbox(
    "üé® Selecione o estilo musical:",
    estilos_disponiveis,
    index=0
)

# Mapear estilo para formato simples
estilo_map = {
    "Tradicional (Hinos Cl√°ssicos)": "tradicional",
    "Contempor√¢neo (M√∫sica Cat√≥lica Moderna)": "contempor√¢neo",
    "Gregoriano (Inspira√ß√£o Medieval)": "gregoriano",
    "Mariano (Devo√ß√£o √† Nossa Senhora)": "mariano",
    "Lit√∫rgico (Para Missa)": "lit√∫rgico"
}
estilo = estilo_map[estilo_selecionado]

# Abas principais expandidas
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üéµ Criar Nova M√∫sica",
    "üéº Modificar Existente",
    "üíæ Favoritos & Playlists",
    "üéöÔ∏è Mixer Avan√ßado",
    "üìä Estat√≠sticas"
])

with tab1:
    st.subheader("üìù Composi√ß√£o Musical")

    # Usar sugest√µes lit√∫rgicas
    col_sugest1, col_sugest2 = st.columns(2)
    with col_sugest1:
        usar_sugestoes = st.checkbox(
            f"üìÖ Usar sugest√µes para {info_liturgica['tempo']}",
            value=True,
            help="Usar temas e estilo sugeridos para o tempo lit√∫rgico atual"
        )

    with col_sugest2:
        if usar_sugestoes:
            st.info(f"üé® Estilo: {info_liturgica['estilo_sugerido'].title()}")

    # Campo de sentimentos/temas
    if usar_sugestoes:
        sentimentos_default = info_liturgica['temas_sugeridos']
        estilo_default = info_liturgica['estilo_sugerido']
    else:
        sentimentos_default = "gratid√£o, esperan√ßa, paz, devo√ß√£o mariana"
        estilo_default = estilo

    sentimentos = st.text_area(
        "Digite os sentimentos ou temas que deseja incluir na m√∫sica:",
        sentimentos_default,
        height=100
    )

    # Configura√ß√µes avan√ßadas
    with st.expander("üîß Configura√ß√µes Avan√ßadas"):
        col_config1, col_config2 = st.columns(2)

        with col_config1:
            incluir_partituras = st.checkbox("üéº Gerar partituras", value=True)
            incluir_cifras_detalhadas = st.checkbox("üé∏ Cifras detalhadas", value=True)

        with col_config2:
            incluir_coro_satb = st.checkbox("üé≠ Arranjo para coro SATB", value=False)
            salvar_automaticamente = st.checkbox("üíæ Salvar automaticamente", value=True)

with tab2:
    st.subheader("üéº Upload e Modifica√ß√£o de M√∫sica")

    # Upload de arquivo
    uploaded_file = st.file_uploader(
        "üìÅ Fa√ßa upload de uma m√∫sica (MP3, WAV, M4A):",
        type=['mp3', 'wav', 'm4a', 'ogg'],
        help="Envie uma m√∫sica para modificar o tom preservando a voz"
    )

    if uploaded_file is not None:
        # Mostrar informa√ß√µes do arquivo
        st.success(f"‚úÖ Arquivo carregado: {uploaded_file.name}")

        # Player do √°udio original
        st.audio(uploaded_file.getvalue(), format='audio/mp3')

        # Configura√ß√µes para mudan√ßa de tom
        col_tom1, col_tom2 = st.columns(2)

        with col_tom1:
            tom_original_upload = st.selectbox(
                "üéº Tom original da m√∫sica:",
                tons_disponiveis,
                index=6,  # G como padr√£o
                key="tom_original"
            )

        with col_tom2:
            tom_novo_upload = st.selectbox(
                "üéØ Novo tom desejado:",
                tons_disponiveis,
                index=0,  # C como padr√£o
                key="tom_novo"
            )

        # Converter tons para formato simples
        tom_orig_simples = tom_map.get(tom_original_upload, tom_original_upload)
        tom_novo_simples = tom_map.get(tom_novo_upload, tom_novo_upload)

        # Bot√£o para processar
        if st.button("üîÑ Mudar Tom da M√∫sica", key="mudar_tom"):
            if tom_orig_simples != tom_novo_simples:
                with st.spinner(f"Mudando tom de {tom_original_upload} para {tom_novo_upload}..."):
                    try:
                        audio_modificado = mudar_tom_musica(
                            uploaded_file.getvalue(),
                            tom_orig_simples,
                            tom_novo_simples
                        )

                        if audio_modificado:
                            st.success(f"üéâ Tom alterado com sucesso de {tom_original_upload} para {tom_novo_upload}!")

                            # Player do √°udio modificado
                            st.subheader("üéµ Resultado:")
                            st.audio(audio_modificado, format='audio/mp3')

                            # Bot√£o de download
                            st.download_button(
                                label="‚¨áÔ∏è Download da M√∫sica Modificada",
                                data=audio_modificado,
                                file_name=f"musica_modificada_{tom_novo_simples}.mp3",
                                mime="audio/mp3"
                            )

                            # Salvar na sess√£o
                            st.session_state.musica_modificada = audio_modificado
                            st.session_state.tom_modificado = tom_novo_simples
                        else:
                            st.error("‚ùå Erro ao modificar a m√∫sica.")

                    except Exception as e:
                        st.error(f"‚ùå Erro ao processar: {str(e)}")
            else:
                st.warning("‚ö†Ô∏è Os tons original e novo s√£o iguais. Nenhuma modifica√ß√£o necess√°ria.")

# Informa√ß√µes adicionais (fora das abas)
with st.expander("‚ÑπÔ∏è Informa√ß√µes sobre os estilos e funcionalidades"):
    st.markdown("""
    ### üé® Estilos Musicais:
    **Tradicional**: Hinos cl√°ssicos cat√≥licos com harmonias tradicionais
    **Contempor√¢neo**: M√∫sica cat√≥lica moderna com instrumenta√ß√£o atual
    **Gregoriano**: Inspirado no canto gregoriano medieval
    **Mariano**: Focado na devo√ß√£o √† Virgem Maria
    **Lit√∫rgico**: Apropriado para uso durante a Santa Missa

    ### üîß Funcionalidades:
    **Criar Nova M√∫sica**: Gera letra e m√∫sica cat√≥lica com IA
    **Modificar M√∫sica Existente**: Altera o tom de m√∫sicas j√° prontas preservando a voz
    **√Åudio com Voz**: Gera √°udio com Text-to-Speech em portugu√™s brasileiro
    **√Åudio Instrumental**: Gera apenas a base musical sem voz
    """)

# Bot√µes de a√ß√£o (apenas na aba de cria√ß√£o)
with tab1:
    # Bot√µes de a√ß√£o
    col1, col2, col3 = st.columns(3)

    with col1:
        gerar_musica = st.button("üéµ Gerar M√∫sica", type="primary", use_container_width=True)

    with col2:
        gerar_audio_instrumental = st.button("üéº √Åudio Instrumental", use_container_width=True)

    with col3:
        gerar_audio_com_letra = st.button("üé§ √Åudio com Voz", use_container_width=True)

# Gera√ß√£o da m√∫sica (aba 1)
if gerar_musica:
    with st.spinner("Compondo a m√∫sica cat√≥lica..."):
        try:
            resultado = criar_musica(sentimentos, tom, estilo)

            st.success("üéâ M√∫sica cat√≥lica composta com sucesso!")

            # Processar e exibir o texto formatado
            st.markdown("### üìú Composi√ß√£o Musical")
            if isinstance(resultado, str):
                try:
                    resultado_json = json.loads(resultado)
                    texto_formatado = resultado_json.get("raw", resultado)
                except json.JSONDecodeError:
                    texto_formatado = resultado
            elif isinstance(resultado, dict):
                texto_formatado = resultado.get("raw", str(resultado))
            else:
                texto_formatado = str(resultado)

            # Exibir o texto formatado
            st.markdown(texto_formatado)

            # Extrair letra para uso posterior
            letra_extraida = extrair_letra_musica(texto_formatado)

            # Salvar resultado na sess√£o para uso posterior
            st.session_state.ultima_musica = texto_formatado
            st.session_state.ultima_letra = letra_extraida
            st.session_state.ultimo_tom = tom
            st.session_state.ultimo_estilo = estilo

        except Exception as e:
            st.error("‚ùå Ocorreu um erro ao compor a m√∫sica.")
            st.error(f"Detalhes do erro: {str(e)}")

# Gera√ß√£o de √°udio instrumental (aba 1)
if gerar_audio_instrumental:
    if 'ultima_musica' not in st.session_state:
        st.warning("‚ö†Ô∏è Primeiro gere uma m√∫sica antes de criar o √°udio!")
    else:
        with st.spinner("Gerando √°udio instrumental..."):
            try:
                audio_bytes = gerar_audio_simples(
                    st.session_state.get('ultimo_tom', tom),
                    st.session_state.get('ultimo_estilo', estilo)
                )

                if audio_bytes:
                    st.success("üé∂ √Åudio instrumental gerado com sucesso!")

                    # Player de √°udio
                    st.audio(audio_bytes, format='audio/mp3')

                    # Bot√£o de download
                    st.download_button(
                        label="‚¨áÔ∏è Download do √Åudio Instrumental",
                        data=audio_bytes,
                        file_name=f"instrumental_{tom}_{estilo}.mp3",
                        mime="audio/mp3"
                    )
                else:
                    st.error("‚ùå Erro ao gerar o √°udio instrumental.")

            except Exception as e:
                st.error("‚ùå Ocorreu um erro ao gerar o √°udio instrumental.")
                st.error(f"Detalhes do erro: {str(e)}")

# Gera√ß√£o de √°udio com voz (aba 1)
if gerar_audio_com_letra:
    if 'ultima_letra' not in st.session_state:
        st.warning("‚ö†Ô∏è Primeiro gere uma m√∫sica antes de criar o √°udio com voz!")
    else:
        with st.spinner("Gerando √°udio com voz em portugu√™s..."):
            try:
                letra = st.session_state.get('ultima_letra', '')

                if not letra or letra == "Letra n√£o encontrada no texto gerado.":
                    st.error("‚ùå Letra n√£o encontrada. Tente gerar a m√∫sica novamente.")
                else:
                    # Mostrar letra que ser√° cantada
                    with st.expander("üìù Letra que ser√° cantada:"):
                        st.write(letra)

                    audio_bytes = gerar_audio_com_voz(
                        letra,
                        st.session_state.get('ultimo_tom', tom),
                        st.session_state.get('ultimo_estilo', estilo)
                    )

                    if audio_bytes:
                        st.success("üé§ √Åudio com voz gerado com sucesso!")

                        # Player de √°udio
                        st.audio(audio_bytes, format='audio/mp3')

                        # Bot√£o de download
                        st.download_button(
                            label="‚¨áÔ∏è Download do √Åudio com Voz",
                            data=audio_bytes,
                            file_name=f"musica_com_voz_{tom}_{estilo}.mp3",
                            mime="audio/mp3"
                        )
                    else:
                        st.error("‚ùå Erro ao gerar o √°udio com voz.")

            except Exception as e:
                st.error("‚ùå Ocorreu um erro ao gerar o √°udio com voz.")
                st.error(f"Detalhes do erro: {str(e)}")

# Aba 3: Favoritos e Playlists
with tab3:
    st.subheader("üíæ Favoritos e Playlists")

    # Sub-abas para organizar
    subtab1, subtab2, subtab3 = st.tabs(["‚≠ê Favoritos", "üìã Playlists", "üìö Biblioteca"])

    with subtab1:
        st.write("### ‚≠ê Suas M√∫sicas Favoritas")
        favoritos = sistemas["favoritos"].obter_favoritos()

        if favoritos:
            for musica in favoritos[:5]:  # Mostrar apenas 5 primeiras
                with st.expander(f"üéµ {musica['titulo']} ({musica['tom']} - {musica['estilo']})"):
                    st.write(f"**Data:** {musica['data_criacao'][:10]}")
                    st.write(f"**Reprodu√ß√µes:** {musica['contador_reproducoes']}")
                    if st.button(f"‚ñ∂Ô∏è Reproduzir", key=f"play_{musica['id']}"):
                        musica_completa = sistemas["favoritos"].obter_musica(musica['id'])
                        if 'audio_bytes' in musica_completa:
                            st.audio(musica_completa['audio_bytes'], format='audio/mp3')
        else:
            st.info("Nenhuma m√∫sica nos favoritos ainda. Crie uma m√∫sica e adicione aos favoritos!")

    with subtab2:
        st.write("### üìã Suas Playlists")

        # Criar nova playlist
        with st.expander("‚ûï Criar Nova Playlist"):
            nome_playlist = st.text_input("Nome da playlist:")
            desc_playlist = st.text_area("Descri√ß√£o (opcional):")
            if st.button("Criar Playlist"):
                if nome_playlist:
                    playlist_id = sistemas["favoritos"].criar_playlist(nome_playlist, desc_playlist)
                    if playlist_id:
                        st.success(f"‚úÖ Playlist '{nome_playlist}' criada com sucesso!")
                        st.rerun()

        # Listar playlists existentes
        playlists = sistemas["favoritos"].listar_playlists()
        for playlist in playlists[:3]:  # Mostrar apenas 3 primeiras
            with st.expander(f"üìã {playlist['nome']} ({playlist['quantidade_musicas']} m√∫sicas)"):
                st.write(f"**Descri√ß√£o:** {playlist['descricao']}")
                st.write(f"**Criada em:** {playlist['data_criacao'][:10]}")
                st.write(f"**Reprodu√ß√µes:** {playlist['contador_reproducoes']}")

    with subtab3:
        st.write("### üìö Biblioteca Completa")

        # Filtros
        col_filtro1, col_filtro2 = st.columns(2)
        with col_filtro1:
            filtro_estilo = st.selectbox("Filtrar por estilo:", ["Todos"] + list(set([m['estilo'] for m in sistemas["favoritos"].listar_musicas()])))
        with col_filtro2:
            filtro_tom = st.selectbox("Filtrar por tom:", ["Todos"] + list(set([m['tom'] for m in sistemas["favoritos"].listar_musicas()])))

        # Aplicar filtros
        filtro_estilo_real = None if filtro_estilo == "Todos" else filtro_estilo
        filtro_tom_real = None if filtro_tom == "Todos" else filtro_tom

        musicas_filtradas = sistemas["favoritos"].listar_musicas(
            filtro_estilo=filtro_estilo_real,
            filtro_tom=filtro_tom_real
        )

        st.write(f"**{len(musicas_filtradas)} m√∫sica(s) encontrada(s)**")

        for musica in musicas_filtradas[:10]:  # Mostrar apenas 10 primeiras
            col_info, col_acoes = st.columns([3, 1])
            with col_info:
                st.write(f"üéµ **{musica['titulo']}** - {musica['tom']} ({musica['estilo']})")
                st.caption(f"Criada em {musica['data_criacao'][:10]} ‚Ä¢ {musica['contador_reproducoes']} reprodu√ß√µes")
            with col_acoes:
                if st.button("‚≠ê", key=f"fav_{musica['id']}", help="Adicionar aos favoritos"):
                    sistemas["favoritos"].adicionar_aos_favoritos(musica['id'])
                    st.success("Adicionado aos favoritos!")

# Aba 4: Mixer Avan√ßado
with tab4:
    st.subheader("üéöÔ∏è Mixer de √Åudio Avan√ßado")

    st.info("üí° **Dica:** Primeiro gere uma m√∫sica com voz e instrumental, depois use o mixer para ajustar o som.")

    # Verificar se h√° √°udios na sess√£o
    if 'ultima_letra' in st.session_state and 'ultimo_tom' in st.session_state:

        # Presets de ambiente
        col_preset1, col_preset2 = st.columns(2)
        with col_preset1:
            presets_disponiveis = sistemas["mixer"].obter_presets_disponiveis()
            ambiente_selecionado = st.selectbox(
                "üèõÔ∏è Ambiente ac√∫stico:",
                list(presets_disponiveis["ambientes"].keys()),
                format_func=lambda x: presets_disponiveis["ambientes"][x]
            )

        with col_preset2:
            estilo_mixer = st.selectbox(
                "üé® Preset de estilo:",
                list(presets_disponiveis["estilos"].keys()),
                format_func=lambda x: presets_disponiveis["estilos"][x]
            )

        # Controles manuais
        with st.expander("üéõÔ∏è Controles Manuais"):
            col_vol1, col_vol2 = st.columns(2)
            with col_vol1:
                volume_voz = st.slider("üé§ Volume da Voz", -20, 20, 5)
                eq_voz_low = st.slider("üîä EQ Voz - Graves", -10, 10, 0)
                eq_voz_mid = st.slider("üîä EQ Voz - M√©dios", -10, 10, 2)
                eq_voz_high = st.slider("üîä EQ Voz - Agudos", -10, 10, 1)

            with col_vol2:
                volume_instrumental = st.slider("üéº Volume Instrumental", -30, 10, -8)
                reverb_amount = st.slider("üåä Reverb", 0.0, 1.0, 0.15)
                compressor = st.slider("üóúÔ∏è Compressor", -30, -5, -18)
                fade_duration = st.slider("‚è≥ Fade In/Out (ms)", 0, 5000, 1000)

        # Bot√£o para aplicar mixagem
        if st.button("üéöÔ∏è Aplicar Mixagem Avan√ßada", type="primary"):
            with st.spinner("Aplicando mixagem profissional..."):
                try:
                    # Gerar √°udios base se n√£o existirem
                    letra = st.session_state.get('ultima_letra', '')
                    tom_atual = st.session_state.get('ultimo_tom', 'C')
                    estilo_atual = st.session_state.get('ultimo_estilo', 'tradicional')

                    # Gerar √°udio da voz
                    audio_voz = sistemas["vozes"].gerar_audio_com_voz(letra, "feminina_adulta")
                    audio_instrumental = gerar_audio_simples(tom_atual, estilo_atual)

                    if audio_voz and audio_instrumental:
                        # Aplicar mixagem personalizada
                        audio_mixado = sistemas["mixer"].mixagem_personalizada(
                            audio_voz, audio_instrumental,
                            volume_voz=volume_voz,
                            volume_instrumental=volume_instrumental,
                            eq_voz_low=eq_voz_low,
                            eq_voz_mid=eq_voz_mid,
                            eq_voz_high=eq_voz_high,
                            reverb_amount=reverb_amount,
                            compressor_threshold=compressor
                        )

                        if audio_mixado:
                            # Aplicar fade
                            if fade_duration > 0:
                                audio_final = sistemas["mixer"].criar_fade_in_out(
                                    audio_mixado, fade_duration, fade_duration
                                )
                            else:
                                audio_final = audio_mixado

                            st.success("üéâ Mixagem aplicada com sucesso!")

                            # Player
                            st.audio(audio_final, format='audio/mp3')

                            # Download
                            st.download_button(
                                label="‚¨áÔ∏è Download da Mixagem",
                                data=audio_final,
                                file_name=f"mixagem_{ambiente_selecionado}_{tom_atual}.mp3",
                                mime="audio/mp3"
                            )

                            # An√°lise do √°udio
                            analise = sistemas["mixer"].analisar_audio(audio_final)
                            if analise:
                                with st.expander("üìä An√°lise do √Åudio"):
                                    col_analise1, col_analise2 = st.columns(2)
                                    with col_analise1:
                                        st.metric("Dura√ß√£o", f"{analise['duracao_segundos']:.1f}s")
                                        st.metric("Volume M√©dio", f"{analise['volume_medio_db']:.1f} dB")
                                    with col_analise2:
                                        st.metric("Pico M√°ximo", f"{analise['pico_db']:.1f} dB")
                                        st.metric("Sample Rate", f"{analise['sample_rate']} Hz")

                                    if analise['recomendacoes']:
                                        st.warning("‚ö†Ô∏è Recomenda√ß√µes:")
                                        for rec in analise['recomendacoes']:
                                            st.write(f"‚Ä¢ {rec}")
                        else:
                            st.error("‚ùå Erro na mixagem")
                    else:
                        st.error("‚ùå Erro ao gerar √°udios base")

                except Exception as e:
                    st.error(f"‚ùå Erro na mixagem: {str(e)}")
    else:
        st.warning("‚ö†Ô∏è Primeiro crie uma m√∫sica na aba 'Criar Nova M√∫sica' para usar o mixer.")

# Aba 5: Estat√≠sticas
with tab5:
    st.subheader("üìä Estat√≠sticas e An√°lises")

    # Obter estat√≠sticas
    stats = sistemas["favoritos"].obter_estatisticas()

    # M√©tricas principais
    col_stat1, col_stat2, col_stat3, col_stat4 = st.columns(4)

    with col_stat1:
        st.metric("üéµ Total de M√∫sicas", stats['total_musicas'])

    with col_stat2:
        st.metric("‚≠ê Favoritos", stats['total_favoritos'])

    with col_stat3:
        st.metric("üìã Playlists", stats['total_playlists'])

    with col_stat4:
        st.metric("üé® Estilo Favorito", stats['estilo_mais_usado'][0])

    # Informa√ß√µes lit√∫rgicas
    st.write("### üìÖ Informa√ß√µes Lit√∫rgicas")
    col_lit1, col_lit2 = st.columns(2)

    with col_lit1:
        st.info(f"""
        **Tempo Atual:** {info_liturgica['tempo']}
        **Ano Lit√∫rgico:** {info_liturgica['ano_liturgico']}
        **Data:** {info_liturgica['data_atual']}
        """)

    with col_lit2:
        st.success(f"""
        **Estilo Sugerido:** {info_liturgica['estilo_sugerido'].title()}
        **Temas Recomendados:** {info_liturgica['temas_sugeridos']}
        """)

    # Hist√≥rico recente
    st.write("### üìà Atividade Recente")
    historico = sistemas["favoritos"].obter_historico(10)

    if historico:
        for entrada in historico[:5]:
            acao_emoji = {
                "criacao": "üéµ",
                "reproducao": "‚ñ∂Ô∏è",
                "favorito_adicionado": "‚≠ê",
                "favorito_removido": "üíî"
            }
            emoji = acao_emoji.get(entrada['acao'], "üìù")

            st.write(f"{emoji} **{entrada['titulo_musica']}** - {entrada['acao']} em {entrada['timestamp'][:10]}")
    else:
        st.info("Nenhuma atividade registrada ainda.")

    # Dicas e sugest√µes
    st.write("### üí° Dicas e Sugest√µes")

    # Sugest√µes baseadas no tempo lit√∫rgico
    sugestoes_liturgicas = sistemas["calendario"].obter_sugestoes_musicais_detalhadas()

    with st.expander("üéº Sugest√µes para o Tempo Lit√∫rgico Atual"):
        st.write(f"**Tons Recomendados:** {', '.join(sugestoes_liturgicas['tons_recomendados'])}")
        st.write(f"**Instrumenta√ß√£o:** {', '.join(sugestoes_liturgicas['instrumentacao'])}")
        if sugestoes_liturgicas['santo_do_dia']:
            st.write(f"**Santo do Dia:** {sugestoes_liturgicas['santo_do_dia']}")

# Rodap√©
st.markdown("---")
st.markdown("üôè *Que esta m√∫sica possa elevar cora√ß√µes a Deus e honrar Nossa Senhora*")
st.markdown("‚úùÔ∏è *Ad Majorem Dei Gloriam*")
